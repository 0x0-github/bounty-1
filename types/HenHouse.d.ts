/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HenHouseInterface extends ethers.utils.Interface {
  functions: {
    "ETHPrice(uint256)": FunctionFragment;
    "allStakingsOfOwner(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchFoxInfo(uint256[])": FunctionFragment;
    "calculateReward(uint256)": FunctionFragment;
    "claimHenRewards(uint256,bool)": FunctionFragment;
    "claimManyFoxesRewards(uint256[])": FunctionFragment;
    "claimManyHenRewards(uint256[],bool)": FunctionFragment;
    "daysStaked(uint256)": FunctionFragment;
    "eggsHeistedAmount()": FunctionFragment;
    "foxCount()": FunctionFragment;
    "foxValue()": FunctionFragment;
    "foxes(uint256)": FunctionFragment;
    "fulfillRandomnessFromOracle(bytes32)": FunctionFragment;
    "heist(uint256,bool)": FunctionFragment;
    "heistAmount()": FunctionFragment;
    "heistCost(uint256)": FunctionFragment;
    "heistPercentage()": FunctionFragment;
    "heistPrices(uint256)": FunctionFragment;
    "multiStakeHen(uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "randomUtils()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEthFeed(address)": FunctionFragment;
    "setHeistPrice(uint8,uint256)": FunctionFragment;
    "setRandomUtils(address)": FunctionFragment;
    "stakeHen(uint256)": FunctionFragment;
    "stakings(uint256)": FunctionFragment;
    "stakingsByOwner(address,uint256)": FunctionFragment;
    "taxFreeDays()": FunctionFragment;
    "taxPercentage()": FunctionFragment;
    "togglePause()": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "totalTaxAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakeHen(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETHPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allStakingsOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchFoxInfo",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHenRewards",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimManyFoxesRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimManyHenRewards",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "daysStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eggsHeistedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "foxCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "foxValue", values?: undefined): string;
  encodeFunctionData(functionFragment: "foxes", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomnessFromOracle",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "heist",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "heistAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "heistCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "heistPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "heistPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiStakeHen",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomUtils",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setEthFeed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setHeistPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRandomUtils",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeHen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingsByOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taxFreeDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "togglePause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTaxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeHen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ETHPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allStakingsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchFoxInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimHenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimManyFoxesRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimManyHenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daysStaked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eggsHeistedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "foxCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "foxValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "foxes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomnessFromOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "heistAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heistCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "heistPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "heistPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiStakeHen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEthFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHeistPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRandomUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeHen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxFreeDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeHen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Heist(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Heist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type HeistEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    fox: BigNumber;
    hen: BigNumber;
    amount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class HenHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HenHouseInterface;

  functions: {
    ETHPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allStakingsOfOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, string] & {
          tokenId: BigNumber;
          timestamp: BigNumber;
          value: BigNumber;
          metadata: string;
        })[]
      ]
    >;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchFoxInfo(
      foxIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber] & {
          timestamp: BigNumber;
          dailyCount: BigNumber;
          foxValue: BigNumber;
        })[]
      ]
    >;

    calculateReward(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimHenRewards(
      tokenId: BigNumberish,
      unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimManyFoxesRewards(
      claimingFoxes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimManyHenRewards(
      hens: BigNumberish[],
      unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daysStaked(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    eggsHeistedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    foxCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    foxValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    foxes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        dailyCount: BigNumber;
        foxValue: BigNumber;
      }
    >;

    fulfillRandomnessFromOracle(
      requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    heist(
      tokenId: BigNumberish,
      enterHenHouse: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    heistAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    heistCost(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    heistPercentage(overrides?: CallOverrides): Promise<[number]>;

    heistPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    multiStakeHen(
      henIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    randomUtils(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEthFeed(
      _ethFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHeistPrice(
      index: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRandomUtils(
      _randomUtils: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeHen(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number] & {
        timestamp: BigNumber;
        owner: string;
        stolen: number;
      }
    >;

    stakingsByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    taxFreeDays(overrides?: CallOverrides): Promise<[number]>;

    taxPercentage(overrides?: CallOverrides): Promise<[number]>;

    togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalTaxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeHen(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETHPrice(price: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  allStakingsOfOwner(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, string] & {
      tokenId: BigNumber;
      timestamp: BigNumber;
      value: BigNumber;
      metadata: string;
    })[]
  >;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  batchFoxInfo(
    foxIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      dailyCount: BigNumber;
      foxValue: BigNumber;
    })[]
  >;

  calculateReward(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimHenRewards(
    tokenId: BigNumberish,
    unstake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimManyFoxesRewards(
    claimingFoxes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimManyHenRewards(
    hens: BigNumberish[],
    unstake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daysStaked(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  eggsHeistedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  foxCount(overrides?: CallOverrides): Promise<BigNumber>;

  foxValue(overrides?: CallOverrides): Promise<BigNumber>;

  foxes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      dailyCount: BigNumber;
      foxValue: BigNumber;
    }
  >;

  fulfillRandomnessFromOracle(
    requestId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  heist(
    tokenId: BigNumberish,
    enterHenHouse: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  heistAmount(overrides?: CallOverrides): Promise<BigNumber>;

  heistCost(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  heistPercentage(overrides?: CallOverrides): Promise<number>;

  heistPrices(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multiStakeHen(
    henIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  randomUtils(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEthFeed(
    _ethFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHeistPrice(
    index: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRandomUtils(
    _randomUtils: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeHen(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number] & {
      timestamp: BigNumber;
      owner: string;
      stolen: number;
    }
  >;

  stakingsByOwner(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  taxFreeDays(overrides?: CallOverrides): Promise<number>;

  taxPercentage(overrides?: CallOverrides): Promise<number>;

  togglePause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalTaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeHen(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETHPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allStakingsOfOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, string] & {
        tokenId: BigNumber;
        timestamp: BigNumber;
        value: BigNumber;
        metadata: string;
      })[]
    >;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchFoxInfo(
      foxIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        dailyCount: BigNumber;
        foxValue: BigNumber;
      })[]
    >;

    calculateReward(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimHenRewards(
      tokenId: BigNumberish,
      unstake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimManyFoxesRewards(
      claimingFoxes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimManyHenRewards(
      hens: BigNumberish[],
      unstake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    daysStaked(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eggsHeistedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    foxCount(overrides?: CallOverrides): Promise<BigNumber>;

    foxValue(overrides?: CallOverrides): Promise<BigNumber>;

    foxes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        dailyCount: BigNumber;
        foxValue: BigNumber;
      }
    >;

    fulfillRandomnessFromOracle(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    heist(
      tokenId: BigNumberish,
      enterHenHouse: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    heistAmount(overrides?: CallOverrides): Promise<BigNumber>;

    heistCost(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heistPercentage(overrides?: CallOverrides): Promise<number>;

    heistPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiStakeHen(
      henIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    randomUtils(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEthFeed(_ethFeed: string, overrides?: CallOverrides): Promise<void>;

    setHeistPrice(
      index: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRandomUtils(
      _randomUtils: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeHen(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number] & {
        timestamp: BigNumber;
        owner: string;
        stolen: number;
      }
    >;

    stakingsByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxFreeDays(overrides?: CallOverrides): Promise<number>;

    taxPercentage(overrides?: CallOverrides): Promise<number>;

    togglePause(overrides?: CallOverrides): Promise<void>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeHen(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Heist(address,uint256,uint256,uint256)"(
      owner?: string | null,
      fox?: BigNumberish | null,
      hen?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { owner: string; fox: BigNumber; hen: BigNumber; amount: BigNumber }
    >;

    Heist(
      owner?: string | null,
      fox?: BigNumberish | null,
      hen?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { owner: string; fox: BigNumber; hen: BigNumber; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    ETHPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allStakingsOfOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchFoxInfo(
      foxIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateReward(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimHenRewards(
      tokenId: BigNumberish,
      unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimManyFoxesRewards(
      claimingFoxes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimManyHenRewards(
      hens: BigNumberish[],
      unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daysStaked(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eggsHeistedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    foxCount(overrides?: CallOverrides): Promise<BigNumber>;

    foxValue(overrides?: CallOverrides): Promise<BigNumber>;

    foxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fulfillRandomnessFromOracle(
      requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    heist(
      tokenId: BigNumberish,
      enterHenHouse: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    heistAmount(overrides?: CallOverrides): Promise<BigNumber>;

    heistCost(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heistPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    heistPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiStakeHen(
      henIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    randomUtils(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEthFeed(
      _ethFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHeistPrice(
      index: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRandomUtils(
      _randomUtils: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeHen(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakings(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stakingsByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxFreeDays(overrides?: CallOverrides): Promise<BigNumber>;

    taxPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeHen(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETHPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allStakingsOfOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchFoxInfo(
      foxIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateReward(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimHenRewards(
      tokenId: BigNumberish,
      unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimManyFoxesRewards(
      claimingFoxes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimManyHenRewards(
      hens: BigNumberish[],
      unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daysStaked(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eggsHeistedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foxCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foxValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foxes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillRandomnessFromOracle(
      requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    heist(
      tokenId: BigNumberish,
      enterHenHouse: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    heistAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    heistCost(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heistPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    heistPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiStakeHen(
      henIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomUtils(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEthFeed(
      _ethFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHeistPrice(
      index: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRandomUtils(
      _randomUtils: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeHen(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingsByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxFreeDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTaxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeHen(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
